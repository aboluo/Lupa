--- freeling-3.1/src/main/sample_analyzer/socket_original.h	2013-07-17 18:08:18.000000000 +0200
+++ freeling-3.1/src/main/sample_analyzer/socket.h	2014-04-10 12:51:06.568063200 +0200
@@ -42,6 +42,8 @@
 class socket_CS {
   private:
   SOCKET sock, sock2;
+  char request_buffer[BUFF_SZ];
+  int request_buffer_size;
   void error(const std::string &,int) const;
 
   public:
@@ -76,6 +78,8 @@
   server.sin_family = AF_INET;
   server.sin_addr.s_addr = INADDR_ANY;
   server.sin_port = htons(port);
+  request_buffer_size = 0;
+  bzero((char *) request_buffer, BUFF_SZ);
   
   int n=bind(sock, (struct sockaddr *) &server,len);
   if (n < 0) error("ERROR on binding",n);
@@ -99,6 +103,8 @@
   server.sin_family = AF_INET;
   bcopy((char *)hp->h_addr,(char *)&server.sin_addr.s_addr,hp->h_length);
   server.sin_port = htons(port);
+  request_buffer_size = 0;
+  bzero((char *) request_buffer, BUFF_SZ);
 
   int n=connect(sock,(struct sockaddr *) &server,sizeof(server));
   if (n < 0) error("ERROR connecting",n);
@@ -131,26 +137,49 @@
 }
 
 
-int socket_CS::read_message(std::string &s) {
-    
-  int n,nt;
-  char buffer[BUFF_SZ+1];
-
-  s.clear();
-  n = read_from_socket(sock2,buffer,BUFF_SZ);
-  if (n < 0) error("ERROR reading from socket",n);
-  buffer[n]=0;
-  s = s + std::string(buffer);
-  nt = n;
-  while (n>0 and buffer[n-1]!=0) {
-    n = read_from_socket(sock2,buffer,BUFF_SZ);
-    if (n < 0) error("ERROR reading from socket",n);
-    buffer[n]=0;
-    s=s + std::string(buffer);
-    nt += n;
-  }
-
-  return nt;
+int socket_CS::read_message(std::string &s) { 
+	int n,nt,i;
+	char buffer[BUFF_SZ];   
+
+	s.clear();
+
+	if (request_buffer_size>0) {		
+		bcopy((char *)request_buffer,(char *)buffer,request_buffer_size);
+		n = request_buffer_size;
+	} else {
+		n = read_from_socket(sock2,buffer,BUFF_SZ);	 
+	} 
+	if (n < 0) error("ERROR reading from socket",n);	
+	for (i=0;buffer[i]!=0 and i<n;i++);	
+	if (i<n) {	
+		request_buffer_size = n-i-1;
+		bcopy((char *)buffer+i+1,(char *)request_buffer,request_buffer_size);		
+		s.append(buffer,i);	
+		nt = i;
+	}
+	else {
+		request_buffer_size=0;		
+		s.append(buffer,n);				
+		nt = n;
+		while(n>0 and buffer[n-1]!=0){		
+			n = read_from_socket(sock2,buffer,BUFF_SZ);			
+			if (n < 0) error("ERROR reading from socket",n);		
+			for (i=0;buffer[i]!=0 and i<n;i++);
+			if (i<n) {				
+				request_buffer_size = n-i-1;
+				bcopy((char *)buffer+i+1,(char *)request_buffer,request_buffer_size);
+				s.append(buffer,i);	
+				nt += i;
+				n=-1;
+			}
+			else{
+				request_buffer_size=0;
+				s.append(buffer,n);
+				nt += n;
+			}
+		}	
+	}		
+	return nt;
 }
 
 void socket_CS::write_message(const std::string &s) {
